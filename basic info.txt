step 1) use git init to intialise
step 2) can use git status to find if a file is in staging area or not..
step 3) to get a file in staging area use git add file_name or git add . For all file
step 4) now use git commit to commit ...by git cit is must but -m is optional it is to message with commit..
step 5) Eg: git commit -m "Completed module 1"..
step 6) we can see details of commit using git log command

7) we can use git diff filename this command show all the changes that I have done to file since last commit

8)to roll back to previous version of a file that is committed we can use git checkout filename.

9) now to push our file to GitHub repositories ..we need the url of repositories..
   And use git remote add origin https://github.com/nandan440/Store.git ....origin is a conventionally used name for the default remote repository..we can use any name in its place..

Working directory->staging area->local repository->remote repository..

10) then use git push -u origin main   .....here main is the name of brach as we are pushing all files to main branch.

Branch name is main and remote repository name is origin..

11) git ignore -> first make a file with a name .gitignore 
    first remove all files from staging area then use : git rm --cached -r and include all file_name..
  That you want to ignore in .gitignore folder and then commit..

12)..to push node file onto GitHub include all these in .gitignore :
   .DS_Store
    # Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
.pnpm-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# Snowpack dependency directory (https://snowpack.dev/)
web_modules/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional stylelint cache
.stylelintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variable files
.env
.env.development.local
.env.test.local
.env.production.local
.env.local

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Next.js build output
.next
out

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and not Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# vuepress build output
.vuepress/dist

# vuepress v2.x temp and cache directory
.temp
.cache

# Docusaurus cache and generated files
.docusaurus

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port

# Stores VSCode versions used for testing VSCode extensions
.vscode-test

# yarn v2
.yarn/cache
.yarn/unplugged
.yarn/build-state.yml
.yarn/install-state.gz
.pnp.*


